import e from"react";import{_get as t,_isNull as r,_isNA as a,_isJSON as n,_deepCopy as s,_hasOwnProperty as l}from"@niagads/common";import{TextList as i,Text as o}from"./TextRenderers/BasicText.js";import{LinkList as c,Link as u}from"./TextRenderers/Link.js";import{Float as p}from"./TextRenderers/Number.js";import{Badge as f,BooleanBadge as m}from"./TextRenderers/Badge.js";import{PercentageBar as y}from"./TextRenderers/SparkChart.js";const b="NA",d=["boolean","abstract","float","text","annotated_text","badge","link","percentage_bar"],g=e=>{if(void 0===e)return"abstract";if("string"==typeof e&&d.includes(e))return e;throw new Error("Invalid data type `"+e+"`")},x=e=>{const n=t("naValue",e,b),s=t("nullValue",e,n);return r(e.value)?s:a(e.value)?n:t("value",e)},v=e=>{if(Array.isArray(e))return e.map((e=>v(e))).join(" // ");return"boolean"===e.type?t("displayText",r=e)||x(r):x(e);var r},j=e=>{const r=t("value",e),a=t("url",e);return Object.assign(e,{value:r||a,type:"link"}),e},k=e=>({type:"abstract",value:e.map((e=>t("value",e))).join(" // "),items:e}),E=(e,r)=>{let a=t("type",r,"abstract"),i={};if(Array.isArray(e)){if("abstract"==a)throw Error("Cell contains an array; must specify either `text` or `link` as the cell `type` in the column defintion: "+JSON.stringify(e));const t=e.map((e=>E(e,r)));if("text"==a)i=k(t),a="text_list";else{if("link"!=a)throw Error("Arrays of values are only supported for `text` or `link` table cell types: "+JSON.stringify(e));i=k(t),a="link_list"}}else if(n(e)){if(i=s(e),"link"==a&&(i=j(i)),"abstract"===a&&(l("url",e)?(a="link",i=j(i)):a="text",console.warn("`type` must be specified in the column defintion to correctly interpret structured values; assuming `"+a+"` cell: "+JSON.stringify(e))),null==t("value",i))throw Error("unable to infer `value` for cell: "+JSON.stringify(e))}else Object.assign(i,{value:e});"abstract"===a&&(a="text"),Object.assign(i,{type:a});const o=t("format",r);if(o){if("boolean"==a){const e=t("value",i),r=t("trueValue",o);r&&!0===e&&Object.assign(i,{displayText:r})}if("float"==a){const e=t("precision",o);e&&Object.assign(i,{precision:e})}Object.assign(i,{nullValue:t("nullValue",o),naValue:t("naValue",o,b)})}return i},h=t=>{switch(t.type){case"abstract":case"text":return e.createElement(o,{props:t});case"link":return e.createElement(u,{props:t});case"boolean":return e.createElement(m,{props:t});case"badge":return e.createElement(f,{props:t});case"float":return e.createElement(p,{props:t});case"percentage_bar":return e.createElement(y,{props:t});case"text_list":return e.createElement(i,{props:t});case"link_list":return e.createElement(c,{props:t});default:throw Error(`Unknown cell type for rendering: ${JSON.stringify(t)}`)}};export{b as DEFAULT_NA_VALUE,v as getCellValue,h as renderCell,E as resolveCell,g as validateCellType};
//# sourceMappingURL=Cell.js.map
