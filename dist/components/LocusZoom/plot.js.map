{"version":3,"file":"plot.js","sources":["../../../src/components/LocusZoom/plot.js"],"sourcesContent":["import LocusZoom from \"locuszoom\";\n\nimport {\n    CustomAssociationAdapter,\n    CustomGeneAdapter,\n    CustomRecombAdapter,\n    CustomLDServerAdapter,\n} from \"./adapters\";\n\nimport {\n    standard_association_toolbar,\n    standard_association_tooltip,\n    standard_genes_tooltip,\n    _ldColorScale,\n    _ldLegend,\n} from \"./layouts\";\n\nexport function initialize (\n    selector,\n    lzState,\n    track,\n    endpoint,\n    width,\n    genomeBuild\n) {\n    // Register Adaptors\n    LocusZoom.Adapters.add(\"NIAGADS_assoc\", CustomAssociationAdapter, true); //override if exists\n    LocusZoom.Adapters.add(\"NIAGADS_gene\", CustomGeneAdapter, true);\n    LocusZoom.Adapters.add(\"NIAGADS_recomb\", CustomRecombAdapter, true);\n    LocusZoom.Adapters.add(\"NIAGADS_ldserver\", CustomLDServerAdapter, true);\n\n    // set data sources\n    const dataSources = new LocusZoom.DataSources();\n    dataSources.add(\"assoc\", [\n        \"NIAGADS_assoc\",\n        { url: endpoint, initial_state: lzState, track: track },\n    ]);\n    dataSources.add(\"ld\", [\n        \"NIAGADS_ldserver\",\n        { url: endpoint, initial_state: lzState },\n    ]);\n    dataSources.add(\"gene\", [\n        \"NIAGADS_gene\",\n        { url: endpoint, initial_state: lzState },\n    ]);\n    dataSources.add(\"recomb\", [\n        \"NIAGADS_recomb\",\n        { url: endpoint, initial_state: lzState },\n    ]);\n\n    // LocusZoomshould ignore if build is GRCh38, will decide later if to host locally for GRCh37\n    // see https://statgen.github.io/locuszoom/docs/api/data_adapters.js.html#line403\n    dataSources.add(\"constraint\", [\n        \"GeneConstraintLZ\",\n        { url: \"https://gnomad.broadinstitute.org/api/\", build: genomeBuild },\n    ]);\n\n    const layout = initializeLayout(lzState, width);\n\n    return LocusZoom.populate(`#${selector}`, dataSources, layout);\n}\n\nconst initializeLayout = (state, containerWidth) => {\n    let layout = LocusZoom.Layouts.get(\"plot\", \"standard_association\", {\n        state: state,\n        responsive_resize: true,\n        min_region_scale: 20000,\n        max_region_scale: 1000000,\n        toolbar: standard_association_toolbar,\n        panels: [\n            LocusZoom.Layouts.get(\"panel\", \"association\", {\n                namespace: { assoc: \"assoc\" },\n                height: 400,\n                id: \"association_panel\", // Give each panel a unique ID\n            }),\n            LocusZoom.Layouts.get(\"panel\", \"genes\", {\n                height: 225,\n            }),\n        ],\n    });\n\n    // data layer customizations\n    for (const [pindex, panel] of layout.panels.entries()) {\n        if (panel.id == \"association_panel\") {\n            for (const [dindex, dataLayer] of panel.data_layers.entries()) {\n                if (dataLayer.id == \"associationpvalues\") {\n                    layout.panels[pindex].data_layers[dindex].legend = _ldLegend;\n                    layout.panels[pindex].data_layers[dindex].tooltip =\n                        standard_association_tooltip;\n                }\n            }\n        }\n\n        if (panel.id == \"genes\") {\n            for (const [dindex, dataLayer] of panel.data_layers.entries()) {\n                if (dataLayer.id == \"genes\") {\n                    layout.panels[pindex].data_layers[dindex].tooltip =\n                        standard_genes_tooltip;\n                }\n            }\n        }\n    }\n\n    return layout;\n};\n"],"names":["initialize","selector","lzState","track","endpoint","width","genomeBuild","LocusZoom","Adapters","add","CustomAssociationAdapter","CustomGeneAdapter","CustomRecombAdapter","CustomLDServerAdapter","dataSources","DataSources","url","initial_state","build","layout","initializeLayout","populate","state","containerWidth","Layouts","get","responsive_resize","min_region_scale","max_region_scale","toolbar","standard_association_toolbar","panels","namespace","assoc","height","id","pindex","panel","entries","dindex","dataLayer","data_layers","legend","_ldLegend","tooltip","standard_association_tooltip","standard_genes_tooltip"],"mappings":"sSAiBO,SAASA,EACZC,EACAC,EACAC,EACAC,EACAC,EACAC,GAGAC,EAAUC,SAASC,IAAI,gBAAiBC,GAA0B,GAClEH,EAAUC,SAASC,IAAI,eAAgBE,GAAmB,GAC1DJ,EAAUC,SAASC,IAAI,iBAAkBG,GAAqB,GAC9DL,EAAUC,SAASC,IAAI,mBAAoBI,GAAuB,GAGlE,MAAMC,EAAc,IAAIP,EAAUQ,YAClCD,EAAYL,IAAI,QAAS,CACrB,gBACA,CAAEO,IAAKZ,EAAUa,cAAef,EAASC,MAAOA,KAEpDW,EAAYL,IAAI,KAAM,CAClB,mBACA,CAAEO,IAAKZ,EAAUa,cAAef,KAEpCY,EAAYL,IAAI,OAAQ,CACpB,eACA,CAAEO,IAAKZ,EAAUa,cAAef,KAEpCY,EAAYL,IAAI,SAAU,CACtB,iBACA,CAAEO,IAAKZ,EAAUa,cAAef,KAKpCY,EAAYL,IAAI,aAAc,CAC1B,mBACA,CAAEO,IAAK,yCAA0CE,MAAOZ,KAG5D,MAAMa,EAASC,EAAiBlB,GAEhC,OAAOK,EAAUc,SAAS,IAAIpB,IAAYa,EAAaK,EAC3D,CAEA,MAAMC,EAAmB,CAACE,EAAOC,KAC7B,IAAIJ,EAASZ,EAAUiB,QAAQC,IAAI,OAAQ,uBAAwB,CAC/DH,MAAOA,EACPI,mBAAmB,EACnBC,iBAAkB,IAClBC,iBAAkB,IAClBC,QAASC,EACTC,OAAQ,CACJxB,EAAUiB,QAAQC,IAAI,QAAS,cAAe,CAC1CO,UAAW,CAAEC,MAAO,SACpBC,OAAQ,IACRC,GAAI,sBAER5B,EAAUiB,QAAQC,IAAI,QAAS,QAAS,CACpCS,OAAQ,SAMpB,IAAK,MAAOE,EAAQC,KAAUlB,EAAOY,OAAOO,UAAW,CACnD,GAAgB,qBAAZD,EAAMF,GACN,IAAK,MAAOI,EAAQC,KAAcH,EAAMI,YAAYH,UAC5B,sBAAhBE,EAAUL,KACVhB,EAAOY,OAAOK,GAAQK,YAAYF,GAAQG,OAASC,EACnDxB,EAAOY,OAAOK,GAAQK,YAAYF,GAAQK,QACtCC,GAKhB,GAAgB,SAAZR,EAAMF,GACN,IAAK,MAAOI,EAAQC,KAAcH,EAAMI,YAAYH,UAC5B,SAAhBE,EAAUL,KACVhB,EAAOY,OAAOK,GAAQK,YAAYF,GAAQK,QACtCE,EAInB,CAED,OAAO3B,CAAM"}