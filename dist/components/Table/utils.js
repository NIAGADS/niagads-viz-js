const e=e=>{try{const r=JSON.parse(e);return Array.isArray(r)?r.map((e=>e.value)).join(" // "):r.hasOwnProperty("value")?r.value:r}catch(r){return e}},r=(r,n="")=>null===r||"N/A"===r?n:e(r),n=(e,n="")=>{if(!e)return r(null,n);const t=(e=>{const r=e.type?e.type.hasOwnProperty("type")?e.type.type.name:e.type.name:"String";return r.includes("Boolean")?"BooleanCheckAccessor":r})(e);switch(t){case"String":return r(e,n);case"NASpan":return r("N/A",n);case"BooleanCheckAccessor":return"true"===e.props.value?"Yes":"No";default:if(e.props&&e.props.value)return r(e.props.value,n);throw new Error(`ERROR: Unable to parse field value - unhandled ColumnAccessor type: ${e.type.name}`)}};export{n as parseFieldValue,e as resolveJSONFieldValue,r as resolveNullFieldValue};
//# sourceMappingURL=utils.js.map
